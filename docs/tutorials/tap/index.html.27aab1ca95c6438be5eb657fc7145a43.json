{"head":{"title":"Using Istanbul With Node Tap","layout":"WithQuickStart","QuickStart":{"title":"Node Tap"},"description":"Node Tap uses nyc to track code coverage, even across subprocess boundaries. It is included by default, and thereâ€™s nothing you need to doâ€¦"},"body":"<p><a href=\"https://github.com/tapjs/node-tap\" target=\"_blank\">Node Tap</a> uses nyc to track code coverage, even across subprocess boundaries. It is included by default, and thereâ€™s nothing you need to do but enable it.</p>\n<p>More detail about node-tap's coverage information can be found <a href=\"http://www.node-tap.org/coverage\">in the node-tap.org documentation</a>.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"tap test/*.js --coverage\"</span>\n  }\n}</code></pre>\n<p><em>that's it!</em> this will instrument the code that your tests execute, and any\nsubprocesses that it spawns.</p>\n<h2 id=\"maximal-coverage-\"><a href=\"#maximal-coverage-\" class=\"phenomic-HeadingAnchor\">#</a>Maximal Coverage ðŸ’¯</h2>\n<p>As of version 7, node-tap lets you easily enforce 100% coverage of all lines, branches, functions, and statements with one easy flag, if that's your thing:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"tap test/*.js --100\"</span>\n  }\n}</code></pre>\n<h2 id=\"using-alternative-reporters\"><a href=\"#using-alternative-reporters\" class=\"phenomic-HeadingAnchor\">#</a>Using Alternative Reporters</h2>\n<p>By default nyc uses Istanbul's <code>text</code> reporter. Various other reporters are\navailable. You can view the full list on the <a href=\"../advanced/alternative-reporters\">Using Alternative Reporters</a> page.</p>\n<p>If you'd like to specify alternate reporter, use the <code>--coverage-report</code> flag.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"tap --coverage --coverage-report=html\"</span>\n  }\n}</code></pre>\n<p>This will output detailed <code>html</code> report to <code>./coverage/index.html</code>.  By default, it will also open up the file in your web browser.</p>\n<h2 id=\"integrating-with-coveralls\"><a href=\"#integrating-with-coveralls\" class=\"phenomic-HeadingAnchor\">#</a>Integrating with Coveralls</h2>\n<p><a href=\"https://coveralls.io\">coveralls.io</a> is a great tool for adding coverage reporting to your continuous-integration flow. Here's how to get Istanbul\nintegrated with coveralls and <a href=\"https://travis-ci.org/\">travis-ci.org</a>.  Here are the steps to link up your travis jobs with Coveralls if you're using node-tap:</p>\n<ol>\n<li>Add the environment variable <code>COVERALLS_REPO_TOKEN</code> to your Travis environment.</li>\n</ol>\n<p>That's it!</p>\n","__filename":"docs/tutorials/tap.md","__url":"/docs/tutorials/tap/","__resourceUrl":"/docs/tutorials/tap/index.html","__dataUrl":"/docs/tutorials/tap/index.html.27aab1ca95c6438be5eb657fc7145a43.json"}