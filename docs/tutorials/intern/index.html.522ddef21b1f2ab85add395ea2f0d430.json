{"head":{"title":"Using Istanbul With Intern","layout":"WithQuickStart","QuickStart":{"title":"Using Istanbul With Intern"},"description":"Code coverage, implemented using Istanbul, is a core feature of Intern. Simply indicate which files should be covered using a glob string,â€¦"},"body":"<p>Code coverage, implemented using Istanbul, is a core feature of\n<a href=\"https://github.com/theintern/intern\">Intern</a>. Simply indicate which files\nshould be covered using a glob string, or an array of glob strings, in the\nIntern config file:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"coverage\"</span>: <span class=\"hljs-string\">\"_build/src/**/*.js\"</span>\n}</code></pre>\n<p>Coverage may also be specified on the command line:</p>\n<pre><code>$ npx intern coverage='_build/src/**/*.js'\n</code></pre>\n<p>Intern will instrument the files specified in the coverage list when they're\nloaded locally in Node or in remote browsers (when performing WebDriver tests).</p>\n<p>If necessary, Istanbul options may be passed directly to the instrumenter by\nproviding an <code>instrumenterOptions</code> property in the Intern config file:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"instrumenterOptions\"</span>: { <span class=\"hljs-attr\">\"esModules\"</span>: <span class=\"hljs-literal\">true</span> }\n}</code></pre>\n<h2 id=\"viewing-results\"><a href=\"#viewing-results\" class=\"phenomic-HeadingAnchor\">#</a>Viewing results</h2>\n<p>Intern's Node-based reporters such as Runner, Pretty, and Simple will all\noutput a coverage summary to the console if any coverage data was collected.</p>\n<pre><code>Total coverage\n-------------------------|----------|----------|----------|----------|----------------|\nFile                     |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |\n-------------------------|----------|----------|----------|----------|----------------|\nAll files                |    91.22 |     80.8 |    88.95 |    91.17 |                |\n src                     |      100 |      100 |      100 |      100 |                |\n  index.ts               |      100 |      100 |      100 |      100 |                |\n src/bin                 |    93.55 |    68.75 |      100 |    92.86 |                |\n  intern.ts              |    93.55 |    68.75 |      100 |    92.86 |    24,39,76,92 |\n src/lib                 |    90.87 |    82.77 |    86.74 |    91.08 |                |\n  BenchmarkSuite.ts      |      100 |      100 |      100 |      100 |                |\n  BenchmarkTest.ts       |     91.3 |    74.29 |    81.82 |    91.11 |... 214,254,255 |\n  Channel.ts             |      100 |       75 |      100 |      100 |             25 |\n-------------------------|----------|----------|----------|----------|----------------|\n</code></pre>\n<p>Intern also provides easy access to the cobertura ('cobertura'), html\n('htmlcoverage'), json ('jsoncoverage'), and lcov ('lcov') Istanbul reporters.\nReporters may be specified using the <code>reporters</code> config property:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"reporters\"</span>: [ <span class=\"hljs-string\">\"runner\"</span>, <span class=\"hljs-string\">\"jsoncoverage\"</span> ]\n}</code></pre>\n<p>Reporters may also be specified on the command line:</p>\n<pre><code>$npx intern reporters=runner reporters=jsoncoverage\n</code></pre>\n<p>By default, file reports will be output to a <code>coverage/</code> directory in the\nproject root. Reporter options such as the output directory or watermarks may\nbe specified by using a properties object:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"reporters\"</span>: [\n    <span class=\"hljs-string\">\"runner\"</span>,\n    {\n      <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"jsoncoverage\"</span>,\n      <span class=\"hljs-attr\">\"filename\"</span>: <span class=\"hljs-string\">\"coverage.json\"</span>\n    }\n  ]\n}</code></pre>\n<h2 id=\"integration-with-codecovio\"><a href=\"#integration-with-codecovio\" class=\"phenomic-HeadingAnchor\">#</a>Integration with Codecov.io</h2>\n<p><a href=\"https://codecov.io\">Codecov.io</a> provides a web-based UI for displaying and\nanalyzing code coverage data. It's a great way to show coverage in a CI flow,\nand it's what Intern itself uses. Setting up codecov through a service like\nTravis CI is very simple:</p>\n<ol>\n<li>\n<p>Configure Intern to gather coverage, and to output it with a reporter that\ngenerates codecov-compatible output, such as lcov or jsoncoverage.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"coverage\"</span>: <span class=\"hljs-string\">\"_build/src/**/*.js\"</span>,\n  <span class=\"hljs-attr\">\"reporters\"</span>: [\n    {\n      <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"jsoncoverage\"</span>,\n      <span class=\"hljs-attr\">\"filename\"</span>: <span class=\"hljs-string\">\"coverage.json\"</span>\n    }\n  ]\n}</code></pre>\n</li>\n<li>\n<p>Add an npm script to your project's <code>package.json</code> to run CI tests.</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"ci\"</span>: <span class=\"hljs-string\">\"tsc &#x26;&#x26; npm run test\"</span>,\n    <span class=\"hljs-attr\">\"test:\"</span> <span class=\"hljs-attr\">\"intern\"</span>\n  }\n}</code></pre>\n</li>\n<li>\n<p>Add statements to <code>.travis.yml</code> to install codecov and upload results.</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-comment\"># .travis.yml</span>\n<span class=\"hljs-attr\">install:</span>\n<span class=\"hljs-bullet\">  -</span> npm install\n<span class=\"hljs-bullet\">  -</span> npm install -g codecov\n<span class=\"hljs-attr\">script:</span>\n<span class=\"hljs-bullet\">  -</span> npm run ci &#x26;&#x26; codecov</code></pre>\n</li>\n</ol>\n","__filename":"docs/tutorials/intern.md","__url":"/docs/tutorials/intern/","__resourceUrl":"/docs/tutorials/intern/index.html","__dataUrl":"/docs/tutorials/intern/index.html.522ddef21b1f2ab85add395ea2f0d430.json"}