{"head":{"title":"Using Istanbul With ES2015+","layout":"WithQuickStart","QuickStart":{"title":"Using Istanbul With ES2015+"},"description":"In this tutorial I'll walk you through setting up test coverage for your fancy pants ES2015+ JavaScript projects. We'll cover two topics:â€¦"},"body":"<p>In this tutorial I'll walk you through setting up test coverage\nfor your fancy pants ES2015+ JavaScript projects. We'll cover two topics:\ninstrumenting native JavaScript code, and writing backwards\ncompatible ES2015+ code using <a href=\"https://github.com/babel/babel\" target=\"_blank\">babel</a>.</p>\n<p>For this tutorial, feel free to follow along in the repository <a href=\"https://github.com/bcoe/es2015-coverage\" target=\"_blank\">bcoe/es2015-coverage</a></p>\n<h2 id=\"es2015-with-babel-preset-env\"><a href=\"#es2015-with-babel-preset-env\" class=\"phenomic-HeadingAnchor\">#</a>ES2015+ With <code>babel-preset-env</code></h2>\n<p>ES2015+ is composed of a <a href=\"https://babeljs.io/docs/plugins/\" target=\"_blank\">daunting array</a> of JavaScript language features. Babel comes to the rescue, providing collections of plugins that\ntrack the standardization process.</p>\n<p>For this tutorial we will be using the <a href=\"http://babeljs.io/docs/plugins/preset-env/\" target=\"_blank\">env preset</a>, a collection of Babel plugins that\nencompass many of the exciting features currently in the pipeline for JavaScript.</p>\n<h3 id=\"prerequisites\"><a href=\"#prerequisites\" class=\"phenomic-HeadingAnchor\">#</a>Prerequisites</h3>\n<p>By relying on the preset, there are only a few dependencies that we need to add\ntest coverage to our ES2015 project:</p>\n<pre><code class=\"hljs language-bash\">npm i babel-cli babel-register babel-plugin-istanbul babel-preset-env cross-env mocha chai nyc --save-dev</code></pre>\n<ul>\n<li><code>babel-cli</code>: is the command-line interface for babel; we use it during the build step.</li>\n<li><code>babel-register</code>: automatically compiles ES2015+ JavaScript as it's required in your\ntests.</li>\n<li><code>babel-plugin-istanbul</code>: this plugin adds coverage instrumentation to your ES2015+ code\nas it's compiled.</li>\n<li><code>nyc</code>: outputs the coverage information to disk, and handles running reports.</li>\n<li><code>cross-env</code>: used to set <code>NODE_ENV=test</code> in a cross-platform compatible way.</li>\n<li><code>mocha</code>/<code>chai</code>: the test framework that I happen to be using for this tutorial.</li>\n</ul>\n<h3 id=\"configuration\"><a href=\"#configuration\" class=\"phenomic-HeadingAnchor\">#</a>Configuration</h3>\n<p><strong>.babelrc</strong></p>\n<p>We place a <code>.babelrc</code> in the root of our project which is used by <code>babel-cli</code>\nto apply the compilation process:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"presets\"</span>: [\n    <span class=\"hljs-string\">\"env\"</span>\n  ],\n  <span class=\"hljs-attr\">\"env\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: {\n      <span class=\"hljs-attr\">\"plugins\"</span>: [\n        <span class=\"hljs-string\">\"istanbul\"</span>\n      ]\n    }\n  }\n}</code></pre>\n<ul>\n<li><code>presets.env</code>: indicates that we should load the <code>babel-preset-env</code> set of plugins, which is kept up to date for us.</li>\n<li><code>env.test.plugins.istanbul</code>: indicates that we should run the <code>babel-plugin-istanbul</code>\nplugin only when <code>NODE_ENV=test</code>.</li>\n</ul>\n<p><strong>package.json: configuring nyc</strong></p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"nyc\"</span>: {\n    <span class=\"hljs-attr\">\"require\"</span>: [\n      <span class=\"hljs-string\">\"babel-register\"</span>\n    ],\n    <span class=\"hljs-attr\">\"reporter\"</span>: [\n      <span class=\"hljs-string\">\"lcov\"</span>,\n      <span class=\"hljs-string\">\"text\"</span>\n    ],\n    <span class=\"hljs-attr\">\"sourceMap\"</span>: <span class=\"hljs-literal\">false</span>,\n    <span class=\"hljs-attr\">\"instrument\"</span>: <span class=\"hljs-literal\">false</span>\n  }\n}</code></pre>\n<ul>\n<li><code>nyc.require.babel-register</code>: indicates that we should automatically run\n<code>require('babel-register')</code> as <code>nyc</code> loads our tests. This allows us to\nwrite ES2015+ code in our tests without running a build step (code is automatically\ncompiled by babel as it is loaded).</li>\n<li><code>nyc.sourceMap=false</code>/<code>nyc.instrument=false</code>: indicates that we should not use\n<code>nyc</code> for instrumenting tests with coverage or handling source-maps; this\nlogic is instead handled by <code>babel</code> and <code>babel-plugin-istanbul</code>.</li>\n<li><code>nyc.reporter</code>: A list of reporters that you can use, all of which come from\n<a href=\"https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib\">istanbul</a>. In this case we telling nyc to ask for an <code>lcov</code> which gives you\na set of html reports for each file instrumented as well as an <code>lcov.info</code> file which can\nbe sent to coverage services like coveralls.io or codecov.io. The <code>text</code> reporter gives\na table summary of each file's coverage in the terminal.</li>\n</ul>\n<p><strong>package.json: script stanza</strong></p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"babel index.js -d src\"</span>,\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"cross-env NODE_ENV=test nyc mocha test.js\"</span>,\n    <span class=\"hljs-attr\">\"prepublish\"</span>: <span class=\"hljs-string\">\"npm run build\"</span>\n  }\n}</code></pre>\n<ul>\n<li>\n<p><code>scripts.test</code>:</p>\n<ul>\n<li><code>cross-env NODE_ENV=test</code>: sets the <code>NODE_ENV</code> environment variable resulting in the <code>babel-plugin-istanbul</code> plugin being loaded.</li>\n<li><code>nyc</code>: indicates that nyc should be used to run <code>mocha</code>.</li>\n<li><code>mocha test.js</code>: it doesn't get much simpler than this; use <code>mocha</code> to run\n<code>test.js</code>.</li>\n</ul>\n</li>\n<li><code>scripts.build</code>: this script uses <code>babel-cli</code> to compile your ES2015+ code.</li>\n<li><code>scripts.prepublish</code>: we automatically run the build step before publishing our\npackage to npm.</li>\n</ul>\n<h3 id=\"writing-tests\"><a href=\"#writing-tests\" class=\"phenomic-HeadingAnchor\">#</a>Writing Tests</h3>\n<p>Because <code>nyc</code> automatically loads <code>babel-register</code> there is no\nbuild step necessary for your tests. Just write your tests using\nES2015+ syntax and <code>require()</code> the pre-compiled ES2015+ JavaScript files:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> CoverageBabel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./index'</span>\n\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'chai'</span>).should()\n\ndescribe(<span class=\"hljs-string\">'CoverageBabel'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">'returns hello world message'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> cls = <span class=\"hljs-keyword\">new</span> CoverageBabel(<span class=\"hljs-string\">'Ben'</span>)\n    cls.helloMessage().should.equal(<span class=\"hljs-string\">'hello Ben'</span>)\n  })\n})</code></pre>\n<h3 id=\"shipping-your-code\"><a href=\"#shipping-your-code\" class=\"phenomic-HeadingAnchor\">#</a>Shipping Your Code</h3>\n<p>When it's time to publish your code to npm, simply use <code>babel-cli</code> to compile\nyour ES2015+ JavaScript into ES5 compatible code:</p>\n<p><code>babel index.js -d src</code></p>\n<p>This command will read in your ES2015+ <code>./index.js</code> file and output the ES5\n<code>./src/index.js</code> file. Only <code>./src/index.js</code> should be published to npm, which\ncan be achieved by adding a <code>files</code> stanza to your package.json:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"files\"</span>: [\n    <span class=\"hljs-string\">\"src/index.js\"</span>\n  ]\n}</code></pre>\n<h2 id=\"instrumenting-native-es2015-code\"><a href=\"#instrumenting-native-es2015-code\" class=\"phenomic-HeadingAnchor\">#</a>Instrumenting Native ES2015+ Code</h2>\n<p>If you're using newer versions's of Node.js various ES2015+ features are already\nsupported. <a href=\"http://node.green/\" target=\"_blank\">node.green</a> provides\na useful chart for viewing compatibility information.</p>\n<p>nyc uses the same parser underneath the hood as babel and understands native\nES2015+ constructs; with zero configuration you can start instrumenting your ES2015+ code!</p>\n","__filename":"docs/tutorials/es2015.md","__url":"/docs/tutorials/es2015/","__resourceUrl":"/docs/tutorials/es2015/index.html","__dataUrl":"/docs/tutorials/es2015/index.html.008d6e5bedc9933956d90dc959968564.json"}