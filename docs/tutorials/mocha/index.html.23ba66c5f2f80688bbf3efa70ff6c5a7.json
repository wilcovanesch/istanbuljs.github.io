{"head":{"title":"Using Istanbul With Mocha","layout":"WithQuickStart","QuickStart":{"title":"mocha","cmd":"mocha"},"description":"Istanbul is extensively tested with mocha, which we use for many of our own repos. At the end of the day, all you need to do is place theâ€¦"},"body":"<p><em>Istanbul is extensively tested with <a href=\"https://mochajs.org/\">mocha</a>, which we use for many of our own repos.</em></p>\n<p>At the end of the day, all you need to do is place the bin <strong>nyc</strong> in front of the\nexisting test scripts in your package.json:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"nyc mocha --timeout=3000\"</span>\n  }\n}</code></pre>\n<p><em>that's it!</em> this will instrument the code that your tests execute, and any\nsubprocesses that it spawns.</p>\n<h2 id=\"using-alternative-reporters\"><a href=\"#using-alternative-reporters\" class=\"phenomic-HeadingAnchor\">#</a>Using Alternative Reporters</h2>\n<p>By default nyc uses Istanbul's <code>text</code> reporter. Various other reporters are\navailable. You can view the full list on the <a href=\"../../advanced/alternative-reporters\">Using Alternative Reporters</a> page.</p>\n<p>If you'd like to specify alternate reporter, or would like to run\nmultiple reporters, simply use the <code>--reporter</code> flag.</p>\n<p><em>for instance, suppose you would like to output the default text report, along\nwith an HTML coverage report.</em></p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"nyc --reporter=html --reporter=text mocha\"</span>\n  }\n}</code></pre>\n<p>This will output the <code>text</code> report to the terminal, as well as outputting the\ndetailed <code>html</code> report to <code>./coverage/index.html</code>.</p>\n<h2 id=\"integrating-with-coveralls\"><a href=\"#integrating-with-coveralls\" class=\"phenomic-HeadingAnchor\">#</a>Integrating with Coveralls</h2>\n<p><a href=\"https://coveralls.io\">coveralls.io</a> is a great tool for adding coverage reporting to your continuous-integration flow. Here's how to get Istanbul\nintegrated with coveralls and <a href=\"https://travis-ci.org/\">travis-ci.org</a>:</p>\n<ol>\n<li>add the coveralls dependency to your module:</li>\n</ol>\n<pre><code class=\"hljs language-bash\">npm install coveralls --save-dev</code></pre>\n<ol start=\"2\">\n<li>update the scripts in your package.json to include a bin for reporting coverage to coveralls:</li>\n</ol>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"script\"</span>: {\n     <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"nyc --reporter=html --reporter=text mocha\"</span>,\n     <span class=\"hljs-attr\">\"coverage\"</span>: <span class=\"hljs-string\">\"nyc report --reporter=text-lcov | coveralls\"</span>\n  }\n}</code></pre>\n<ol start=\"3\">\n<li>\n<p>For private repos, add the environment variable <code>COVERALLS_REPO_TOKEN</code> to Travis.</p>\n</li>\n<li>\n<p>add the following to your <code>.travis.yml</code>:</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">after_success:</span> npm run coverage</code></pre>\n<h2 id=\"what-now\"><a href=\"#what-now\" class=\"phenomic-HeadingAnchor\">#</a>What Now?</h2>\n<p>nyc and Istanbul provide many advanced configuration options a good place to\nstart learning more is the <a href=\"https://github.com/istanbuljs/nyc\">istanbuljs/nyc README.</a></p>\n","__filename":"docs/tutorials/mocha.md","__url":"/docs/tutorials/mocha/","__resourceUrl":"/docs/tutorials/mocha/index.html","__dataUrl":"/docs/tutorials/mocha/index.html.23ba66c5f2f80688bbf3efa70ff6c5a7.json"}